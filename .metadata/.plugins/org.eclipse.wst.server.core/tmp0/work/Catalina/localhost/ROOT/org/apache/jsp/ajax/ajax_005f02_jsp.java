/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.10
 * Generated at: 2018-08-17 08:52:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ajax;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajax_005f02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("//AJAX 객체 생성\n");
      out.write("function createXMLHttpRequest() {\n");
      out.write("\n");
      out.write("    var xmlReq = null;\n");
      out.write("\n");
      out.write("    if (window.XMLHttpRequest) { // IE 7.0 이상, Non-Microsoft browsers\n");
      out.write("        xmlReq = new XMLHttpRequest();\n");
      out.write("    } else if (window.ActiveXObject) {\n");
      out.write("        try {\n");
      out.write("            // XMLHttpRequest in later versions of Internet Explorer\n");
      out.write("            xmlReq = new ActiveXObject(\"Msxml2.XMLHTTP\");\n");
      out.write("        } catch (e1) {\n");
      out.write("            try {\n");
      out.write("                // Try version supported by older versions of Internet Explorer\n");
      out.write("                xmlReq = new ActiveXObject(\"Microsoft.XMLHTTP\");\n");
      out.write("            } catch (e2) {\n");
      out.write("                // Unable to create an XMLHttpRequest with ActiveX\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    return xmlReq;\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("//AJAX 객체 변수\n");
      out.write("var xmlHttp = null;\n");
      out.write("\n");
      out.write("function send() {\n");
      out.write("// \tconsole.log(\"send() test\");\n");
      out.write("\t//입력 데이터 꺼내기\n");
      out.write("\tvar num1 = document.getElementById(\"num1\").value;\n");
      out.write("\tvar num2 = document.getElementById(\"num2\").value;\n");
      out.write("\tvar oper = document.getElementById(\"oper\").value;\n");
      out.write("\t\n");
      out.write("\t//요청 URL만들기 \n");
      out.write("\tvar query = \"num1=\"+num1+\"&num2=\"+num2+\"&oper=\"+oper;\n");
      out.write("\tvar url= \"/ajax/ajax_02_ok.jsp?\" + query;\n");
      out.write("\t\n");
      out.write("\t//XMLHttpRequest 객체 생성 (XHR 객체 생성)\n");
      out.write("\txmlHttp = createXMLHttpRequest();\n");
      out.write("\t\n");
      out.write("// \tconsole.log(\"--- XHR test ---\");\n");
      out.write("// \tconsole.log(xmlHttp);\n");
      out.write("\t\n");
      out.write("\t// -- 요청 전 설정 -- \n");
      out.write("\t// 서버 응답(response)를 처리할 callback 함수 지정(응답처리담당)\n");
      out.write("\txmlHttp.onreadystatechange = callback;\n");
      out.write("\t\n");
      out.write("\t// 통신 방식 설정 \n");
      out.write("\t//  open( method, url, [, async])\n");
      out.write("\txmlHttp.open(\"GET\", url, true);\n");
      out.write("\t\n");
      out.write("\t// --------------\n");
      out.write("\t\n");
      out.write("\t//요청(request) 보내기\n");
      out.write("\txmlHttp.send(null);\n");
      out.write("\t\n");
      out.write("}\n");
      out.write("\n");
      out.write("// XHR의 요청에 대한 응답 처리 함수\n");
      out.write("function callback() {\n");
      out.write("// \tconsole.log(\"XHR 응답 완료\");\n");
      out.write("\t//응답이 완료돼었다면 4번 readyState를 가짐 \n");
      out.write("\tif(xmlHttp.readyState==4){\n");
      out.write("\t\tif(xmlHttp.status ==200) { // 서버OK. 응답\n");
      out.write("\t\t\tprintData();//정상응답 시 처리 함수\n");
      out.write("\t\t\t\n");
      out.write("\t\t} else if(xmlHttp.status==404){ //서버 Not found/\n");
      out.write("\t\t\tconsole.log(\"XHR응답: 페이지 없음\");\n");
      out.write("\t\t\n");
      out.write("\t\t}\n");
      out.write("\t\t// 응답(Request) 상태코드에 따른 처리를 추가한다.\n");
      out.write("\t}\t\n");
      out.write("}\n");
      out.write("\n");
      out.write("function printData() {\n");
      out.write("\tconsole.log(\"200코드 정상응답 처리함수\");\n");
      out.write("\t\n");
      out.write("\t//결과가 반영될 <div>\n");
      out.write("\tvar layout = document.getElementById(\"resultLayout\");\n");
      out.write("\t\n");
      out.write("\t//응답받은 데이터\n");
      out.write("\tvar result = xmlHttp.responseText;\n");
      out.write("\t\n");
      out.write("\t//결과 반영하기\n");
      out.write("\tlayout.innerHTML = result;\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<input type=\"text\" id=\"num1\" />\n");
      out.write("<select id=\"oper\" style=\"vertical-align: middle; height:22px;\">\n");
      out.write("\t<option value=\"add\">더하기</option>\n");
      out.write("\t<option value=\"sub\">빼기</option>\n");
      out.write("\t<option value=\"mul\">곱하기</option>\n");
      out.write("\t<option value=\"div\">나누기</option>\n");
      out.write("</select>\n");
      out.write("<input type=\"text\" id=\"num2\" />\n");
      out.write("<button onclick=\"send();\">=</button>\n");
      out.write("\n");
      out.write("<hr>\n");
      out.write("<div id=\"resultLayout\"></div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
